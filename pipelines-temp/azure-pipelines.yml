# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  ml-ws-connection: 'ZFPOCHP' # Workspace Service Connection name
  ml-ws: 'zf-poc-hp' # AML Workspace name
  ml-rg: 'zf-aml-hp' # AML resource Group name
  ml-ct: 'Traincluster' # AML Compute cluster name
  ml-path: 'ZF-new/CodesScripts' # Model directory path in repo
  ml-exp: 'exp-train' # Experiment name
  ml-model-name: 'pytorch-BD' # Model name

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureCLI@2
  displayName: 'Install AML CLI'
  inputs:
    azureSubscription: $(ml-ws-connection)
    scriptLocation: inlineScript
    scriptType: 'bash'
    inlineScript: 'az extension add -n azure-cli-ml'

- task: AzureCLI@2
  displayName: 'Attach folder to workspace'
  inputs:
    azureSubscription: $(ml-ws-connection)
    workingDirectory: $(ml-path)
    scriptLocation: inlineScript
    scriptType: 'bash'
    inlineScript: 'az ml folder attach -w $(ml-ws) -g $(ml-rg)'

- task: AzureCLI@2
  displayName: 'Create compute for training'
  inputs:
    azureSubscription: $(ml-ws-connection)
    workingDirectory: $(ml-path)
    scriptLocation: inlineScript
    scriptType: 'bash'
    inlineScript: 'az ml computetarget create amlcompute -n $(ml-ct) --vm-size STANDARD_D2_V2 --max-nodes 1'
  
- task: AzureCLI@2
  displayName: 'Train model'
  inputs:
    azureSubscription: $(ml-ws-connection)
    workingDirectory: $(ml-path)
    scriptLocation: inlineScript
    scriptType: 'bash'
    inlineScript: 'az ml run submit-script -c config/train --ct $(ml-ct) -e $(ml-exp) -t run.json CI-process.py'

# Add potential approval step before registration of model

#- task: AzureCLI@2
#  displayName: 'Register model'
#  inputs:
#    azureSubscription: $(ml-ws-connection)
#    workingDirectory: $(ml-path)
#    scriptLocation: inlineScript
#    scriptType: 'bash'
#    inlineScript: 'az ml model register -n $(ml-model-name) -f run.json --asset-path outputs/thismodel.pt -t model.json'